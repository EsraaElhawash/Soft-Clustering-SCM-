import matplotlib.pyplot as plt
from matplotlib.image import imread
import pandas as pd
import numpy as np
#from google.colab import drive
import random
import math


def scm(data,c,max_iter,m,a,e):
    random_idx = np.random.permutation(data.shape[0])
    centroids = np.zeros((c, data.shape[1]))
    for i in range(0 , c):
        centroids[i] = data[random_idx[i]]
    #plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300,
    #          c='r', label='centroid')
    #print(centroids)
    #plt.show()
    iter = 0
    W=np.zeros((data.shape[0],c))
    while( iter<max_iter):
        i=-1
        iter=iter+1
        for point in data :
            i=i+1
            Dists=[]
            for centre in centroids:
                dist = math.sqrt((centre[0] - point[0])**2 + (centre[1] - point[1])**2)
                Dists.append(dist)
            Dists=np.asarray(Dists)

            if (np.all(Dists)==False):
                #print("d5lt el if")
                r=0
                for dist in Dists :
                    if(dist==0):
                        W[i][r]=1
                        for j in range(1,c):
                            if(j!=r):
                                W[i][j]=0 
                    r=r+1
            else :
        
                for j in range(0,c):
                    W[i][j]=(Dists[j])**float(1/(1-m))
                    if(W[i][j]<float(a/c)):
                        W[i][j]=0 
                #print('wtf')
                #print(W[i])
                #print("sum",sum(W[i]))  
                mySum=sum(W[i])
                #print(mySum)
                for j in range(0,c):
                    #print(j,W[i][j])
                    W[i][j]=float(W[i][j])/mySum
                   
        Z = np.zeros((c, data.shape[1]))
        for j in range(0,c):
            Sum2=0
            Sum3=0
            for i in range(0,len(data)):
                Sum2=Sum2+((W[i][j]**m)*data[i])
                Sum3=Sum3+(W[i][j]**m) 
            Z[j]=Sum2/Sum3
            
        #plt.scatter(Z[:, 0], Z[:, 1], marker='*', s=300,
        #          c='r', label='Z')
        #print(Z)
        #plt.show()  
        error=[]
        for j in range (c) : 
            error.append(math.sqrt((Z[j][0]-centroids[j][0])**2 + (Z[j][1]-centroids[j][1])**2))
         
        if(all(x<=e for x in error)): #No Update!
            #print('Convergence')
            break
        else:
            
            centroids=Z        
        return W,centroids

    
#df = pd.read_csv('faithful.csv')

#plt.scatter(df.iloc[:, 1], df.iloc[:, 2])
#plt.title('Visualization of raw data');
#print(np.asarray(df[['eruptions','waiting']]))
#print(df.iloc[:,1:3])
#W=scm(np.asarray(df.iloc[:,1:3]),3,3,2,0.5,0.05)
#print('Memberships: ')
#print(W)
